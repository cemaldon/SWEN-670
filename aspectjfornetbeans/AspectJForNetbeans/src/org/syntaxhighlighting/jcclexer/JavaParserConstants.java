/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */
package org.syntaxhighlighting.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 2;
  /** RegularExpression Id. */
  int ASPECT = 3;
  /** RegularExpression Id. */
  int AFTER = 4;
  /** RegularExpression Id. */
  int AROUND = 5;
  /** RegularExpression Id. */
  int BEFORE = 6;
  /** RegularExpression Id. */
  int POINTCUT = 7;
  /** RegularExpression Id. */
  int EXECUTION = 8;
  /** RegularExpression Id. */
  int RETURNING = 9;
  /** RegularExpression Id. */
  int PRIVILEGED = 10;
  /** RegularExpression Id. */
  int PERTARGET = 11;
  /** RegularExpression Id. */
  int PERTHIS = 12;
  /** RegularExpression Id. */
  int PERCFLOW = 13;
  /** RegularExpression Id. */
  int PERCFLOWBELOW = 14;
  /** RegularExpression Id. */
  int PERTYPEWITHIN = 15;
  /** RegularExpression Id. */
  int ISSINGLETON = 16;
  /** RegularExpression Id. */
  int THROWING = 17;
  /** RegularExpression Id. */
  int PROCEED = 18;
  /** RegularExpression Id. */
  int THISJOINPOINT = 19;
  /** RegularExpression Id. */
  int THISJOINPOINTSTATICPART = 20;
  /** RegularExpression Id. */
  int THISENCLOSINGJOINPOINTSTATICPART = 21;
  /** RegularExpression Id. */
  int DECLARE = 22;
  /** RegularExpression Id. */
  int PARENTS = 23;
  /** RegularExpression Id. */
  int WARNING = 24;
  /** RegularExpression Id. */
  int ERROR = 25;
  /** RegularExpression Id. */
  int SOFT = 26;
  /** RegularExpression Id. */
  int PRECEDENCE = 27;
  /** RegularExpression Id. */
  int DESIGNATORANNTYPE = 28;
  /** RegularExpression Id. */
  int DESIGNATORANNMETHOD = 29;
  /** RegularExpression Id. */
  int DESIGNATORANNCONSTRUCTOR = 30;
  /** RegularExpression Id. */
  int DESIGNATORANNFIELD = 31;
  /** RegularExpression Id. */
  int INITIALIZATION = 32;
  /** RegularExpression Id. */
  int PREINITIALIZATION = 33;
  /** RegularExpression Id. */
  int STATICINITIALIZATION = 34;
  /** RegularExpression Id. */
  int GET = 35;
  /** RegularExpression Id. */
  int SET = 36;
  /** RegularExpression Id. */
  int HANDLER = 37;
  /** RegularExpression Id. */
  int ADVICEEXECUTION = 38;
  /** RegularExpression Id. */
  int WITHIN = 39;
  /** RegularExpression Id. */
  int WITHINCODE = 40;
  /** RegularExpression Id. */
  int CFLOW = 41;
  /** RegularExpression Id. */
  int CFLOWBELOW = 42;
  /** RegularExpression Id. */
  int TARGET = 43;
  /** RegularExpression Id. */
  int ARGS = 44;
  /** RegularExpression Id. */
  int DESIGNATORANNTHIS = 45;
  /** RegularExpression Id. */
  int DESIGNATORANNTARGET = 46;
  /** RegularExpression Id. */
  int DESIGNATORANNARGS = 47;
  /** RegularExpression Id. */
  int DESIGNATORANNWITHIN = 48;
  /** RegularExpression Id. */
  int DESIGNATORANNANNOTATION = 49;
  /** RegularExpression Id. */
  int ABSTRACT = 50;
  /** RegularExpression Id. */
  int ASSERT = 51;
  /** RegularExpression Id. */
  int BOOLEAN = 52;
  /** RegularExpression Id. */
  int BREAK = 53;
  /** RegularExpression Id. */
  int BYTE = 54;
  /** RegularExpression Id. */
  int CASE = 55;
  /** RegularExpression Id. */
  int CATCH = 56;
  /** RegularExpression Id. */
  int CHAR = 57;
  /** RegularExpression Id. */
  int CLASS = 58;
  /** RegularExpression Id. */
  int CONST = 59;
  /** RegularExpression Id. */
  int CONTINUE = 60;
  /** RegularExpression Id. */
  int DEFLT = 61;
  /** RegularExpression Id. */
  int DO = 62;
  /** RegularExpression Id. */
  int DOUBLE = 63;
  /** RegularExpression Id. */
  int ELSE = 64;
  /** RegularExpression Id. */
  int ENUM = 65;
  /** RegularExpression Id. */
  int EXTENDS = 66;
  /** RegularExpression Id. */
  int FINALLY = 67;
  /** RegularExpression Id. */
  int FOR = 68;
  /** RegularExpression Id. */
  int GOTO = 69;
  /** RegularExpression Id. */
  int IF = 70;
  /** RegularExpression Id. */
  int IMPLEMENTS = 71;
  /** RegularExpression Id. */
  int IMPORT = 72;
  /** RegularExpression Id. */
  int INSTANCEOF = 73;
  /** RegularExpression Id. */
  int INT = 74;
  /** RegularExpression Id. */
  int INTERFACE = 75;
  /** RegularExpression Id. */
  int LONG = 76;
  /** RegularExpression Id. */
  int NATIVE = 77;
  /** RegularExpression Id. */
  int NEW = 78;
  /** RegularExpression Id. */
  int NULL = 79;
  /** RegularExpression Id. */
  int PACKAGE = 80;
  /** RegularExpression Id. */
  int PRIVATE = 81;
  /** RegularExpression Id. */
  int PROTECTED = 82;
  /** RegularExpression Id. */
  int PUBLIC = 83;
  /** RegularExpression Id. */
  int RETURN = 84;
  /** RegularExpression Id. */
  int SHORT = 85;
  /** RegularExpression Id. */
  int STATIC = 86;
  /** RegularExpression Id. */
  int STRICTFP = 87;
  /** RegularExpression Id. */
  int SUPER = 88;
  /** RegularExpression Id. */
  int SWITCH = 89;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 90;
  /** RegularExpression Id. */
  int THIS = 91;
  /** RegularExpression Id. */
  int THROW = 92;
  /** RegularExpression Id. */
  int THROWS = 93;
  /** RegularExpression Id. */
  int TRANSIENT = 94;
  /** RegularExpression Id. */
  int TRUE = 95;
  /** RegularExpression Id. */
  int TRY = 96;
  /** RegularExpression Id. */
  int VOID = 97;
  /** RegularExpression Id. */
  int VOLATILE = 98;
  /** RegularExpression Id. */
  int WHILE = 99;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 100;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 101;
  /** RegularExpression Id. */
  int HEX_LITERAL = 102;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 103;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 104;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 105;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 106;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 107;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 108;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 109;
  /** RegularExpression Id. */
  int STRING_LITERAL = 110;
  /** RegularExpression Id. */
  int IDENTIFIER = 111;
  /** RegularExpression Id. */
  int LETTER = 112;
  /** RegularExpression Id. */
  int PART_LETTER = 113;
  /** RegularExpression Id. */
  int LPAREN = 114;
  /** RegularExpression Id. */
  int RPAREN = 115;
  /** RegularExpression Id. */
  int LBRACE = 116;
  /** RegularExpression Id. */
  int RBRACE = 117;
  /** RegularExpression Id. */
  int LBRACKET = 118;
  /** RegularExpression Id. */
  int RBRACKET = 119;
  /** RegularExpression Id. */
  int SEMICOLON = 120;
  /** RegularExpression Id. */
  int COMMA = 121;
  /** RegularExpression Id. */
  int DOT = 122;
  /** RegularExpression Id. */
  int AT = 123;
  /** RegularExpression Id. */
  int ASSIGN = 124;
  /** RegularExpression Id. */
  int LT = 125;
  /** RegularExpression Id. */
  int GT = 126;
  /** RegularExpression Id. */
  int BANG = 127;
  /** RegularExpression Id. */
  int TILDE = 128;
  /** RegularExpression Id. */
  int HOOK = 129;
  /** RegularExpression Id. */
  int COLON = 130;
  /** RegularExpression Id. */
  int EQ = 131;
  /** RegularExpression Id. */
  int LE = 132;
  /** RegularExpression Id. */
  int GE = 133;
  /** RegularExpression Id. */
  int NE = 134;
  /** RegularExpression Id. */
  int SC_OR = 135;
  /** RegularExpression Id. */
  int SC_AND = 136;
  /** RegularExpression Id. */
  int INCR = 137;
  /** RegularExpression Id. */
  int DECR = 138;
  /** RegularExpression Id. */
  int PLUS = 139;
  /** RegularExpression Id. */
  int MINUS = 140;
  /** RegularExpression Id. */
  int STAR = 141;
  /** RegularExpression Id. */
  int SLASH = 142;
  /** RegularExpression Id. */
  int BIT_AND = 143;
  /** RegularExpression Id. */
  int BIT_OR = 144;
  /** RegularExpression Id. */
  int XOR = 145;
  /** RegularExpression Id. */
  int REM = 146;
  /** RegularExpression Id. */
  int LSHIFT = 147;
  /** RegularExpression Id. */
  int RSHIFT = 148;
  /** RegularExpression Id. */
  int LUNSIGNEDSHIFT = 149;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 150;
  /** RegularExpression Id. */
  int PLUSASSIGN = 151;
  /** RegularExpression Id. */
  int MINUSASSIGN = 152;
  /** RegularExpression Id. */
  int STARASSIGN = 153;
  /** RegularExpression Id. */
  int SLASHASSIGN = 154;
  /** RegularExpression Id. */
  int ANDASSIGN = 155;
  /** RegularExpression Id. */
  int ORASSIGN = 156;
  /** RegularExpression Id. */
  int XORASSIGN = 157;
  /** RegularExpression Id. */
  int REMASSIGN = 158;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 159;
  /** RegularExpression Id. */
  int RSHIFTASSIGN = 160;
  /** RegularExpression Id. */
  int LUNSIGNEDSHIFTASSIGN = 161;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 162;
  /** RegularExpression Id. */
  int ELLIPSIS = 163;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 165;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<SINGLE_LINE_COMMENT>",
    "\"aspect\"",
    "\"after\"",
    "\"around\"",
    "\"before\"",
    "\"pointcut\"",
    "\"execution\"",
    "\"returning\"",
    "\"privileged\"",
    "\"pertarget\"",
    "\"perthis\"",
    "\"percflow\"",
    "\"percflowbelow\"",
    "\"pertypewithin\"",
    "\"issingleton\"",
    "\"throwing\"",
    "\"proceed\"",
    "\"thisJoinPoint\"",
    "\"thisJoinPointStaticPart\"",
    "\"thisEnclosingJoinPointStaticPart\"",
    "\"declare\"",
    "\"parents\"",
    "\"warning\"",
    "\"error\"",
    "\"soft\"",
    "\"precedence\"",
    "\"@type\"",
    "\"@method\"",
    "\"@constructor\"",
    "\"@field\"",
    "\"initialization\"",
    "\"preinitialization\"",
    "\"staticinitialization\"",
    "\"get\"",
    "\"set\"",
    "\"handler\"",
    "\"adviceexecution\"",
    "\"within\"",
    "\"withincode\"",
    "\"cflow\"",
    "\"cflowbelow\"",
    "\"target\"",
    "\"args\"",
    "\"@this\"",
    "\"@target\"",
    "\"@args\"",
    "\"@within\"",
    "\"@annotation\"",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"finally\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\"<<<\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"<<<=\"",
    "\">>>=\"",
    "\"...\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 166>",
  };

}
