/* Generated By:JavaCC: Do not edit this line. JavaParserTokenManager.java */
package org.syntaxhighlighting.jcclexer;

/** Token Manager. */
public class JavaParserTokenManager implements JavaParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1004004000L) != 0L)
            return 1;
         if ((active1 & 0x400000000000000L) != 0L || (active2 & 0x800000000L) != 0L)
            return 11;
         if ((active0 & 0xfffc1fff0ffffff8L) != 0L || (active1 & 0xfffffffffL) != 0L)
         {
            jjmatchedKind = 111;
            return 35;
         }
         return -1;
      case 1:
         if ((active0 & 0x3ffc1fff0ffffff8L) != 0L || (active1 & 0xfffffffbfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x40L) != 0L)
            return 35;
         return -1;
      case 2:
         if ((active0 & 0x1800000000L) != 0L || (active1 & 0x100004c10L) != 0L)
            return 35;
         if ((active0 & 0xbffc1fe70ffffff8L) != 0L || (active1 & 0xeffffb3afL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 2;
            }
            return 35;
         }
         return -1;
      case 3:
         if ((active0 & 0x2c0100004380000L) != 0L || (active1 & 0x288009023L) != 0L)
            return 35;
         if ((active0 & 0xbd3c0fe70bc7fff8L) != 0L || (active1 & 0xc77ff2b8cL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 3;
            }
            return 35;
         }
         return -1;
      case 4:
         if ((active0 & 0xb01c09e709fdffe8L) != 0L || (active1 & 0x446df2b8cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 4;
            }
            return 35;
         }
         if ((active0 & 0xd20060002020010L) != 0L || (active1 & 0x831200000L) != 0L)
            return 35;
         return -1;
      case 5:
         if ((active0 & 0x3014046309fffd80L) != 0L || (active1 & 0x444870a8cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 5;
            }
            return 35;
         }
         if ((active0 & 0x8008098400000268L) != 0L || (active1 & 0x22582100L) != 0L)
            return 35;
         return -1;
      case 6:
         if ((active0 & 0x2010002001c41000L) != 0L || (active1 & 0x3000cL) != 0L)
            return 35;
         if ((active0 & 0x10040547083bef80L) != 0L || (active1 & 0x444840a80L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 6;
            return 35;
         }
         return -1;
      case 7:
         if ((active0 & 0x54708398f00L) != 0L || (active1 & 0x44040a80L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 7;
            }
            return 35;
         }
         if ((active0 & 0x1004000000026080L) != 0L || (active1 & 0x400800000L) != 0L)
            return 35;
         return -1;
      case 8:
         if ((active0 & 0x5470839c400L) != 0L || (active1 & 0x4000280L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 8;
            return 35;
         }
         if ((active0 & 0xb00L) != 0L || (active1 & 0x40040800L) != 0L)
            return 35;
         return -1;
      case 9:
         if ((active0 & 0x50008000400L) != 0L || (active1 & 0x280L) != 0L)
            return 35;
         if ((active0 & 0x470039c000L) != 0L || (active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 9;
            return 35;
         }
         return -1;
      case 10:
         if ((active0 & 0x470038c000L) != 0L || (active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 10;
            return 35;
         }
         if ((active0 & 0x10000L) != 0L)
            return 35;
         return -1;
      case 11:
         if ((active1 & 0x4000000L) != 0L)
            return 35;
         if ((active0 & 0x470038c000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 11;
            return 35;
         }
         return -1;
      case 12:
         if ((active0 & 0x4700200000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 111;
               jjmatchedPos = 12;
            }
            return 35;
         }
         if ((active0 & 0x18c000L) != 0L)
            return 35;
         return -1;
      case 13:
         if ((active0 & 0x4600300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 13;
            return 35;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 35;
         return -1;
      case 14:
         if ((active0 & 0x4000000000L) != 0L)
            return 35;
         if ((active0 & 0x600300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 14;
            return 35;
         }
         return -1;
      case 15:
         if ((active0 & 0x600300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 15;
            return 35;
         }
         return -1;
      case 16:
         if ((active0 & 0x400300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 16;
            return 35;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 35;
         return -1;
      case 17:
         if ((active0 & 0x400300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 17;
            return 35;
         }
         return -1;
      case 18:
         if ((active0 & 0x400300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 18;
            return 35;
         }
         return -1;
      case 19:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 19;
            return 35;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 35;
         return -1;
      case 20:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 20;
            return 35;
         }
         return -1;
      case 21:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 21;
            return 35;
         }
         return -1;
      case 22:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 22;
            return 35;
         }
         if ((active0 & 0x100000L) != 0L)
            return 35;
         return -1;
      case 23:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 23;
            return 35;
         }
         return -1;
      case 24:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 24;
            return 35;
         }
         return -1;
      case 25:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 25;
            return 35;
         }
         return -1;
      case 26:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 26;
            return 35;
         }
         return -1;
      case 27:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 27;
            return 35;
         }
         return -1;
      case 28:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 28;
            return 35;
         }
         return -1;
      case 29:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 29;
            return 35;
         }
         return -1;
      case 30:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 30;
            return 35;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 37:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 38:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000100L);
      case 40:
         return jjStopAtPos(0, 114);
      case 41:
         return jjStopAtPos(0, 115);
      case 42:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 43:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800200L);
      case 44:
         return jjStopAtPos(0, 121);
      case 45:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000400L);
      case 46:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 47:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1004000000L);
      case 58:
         return jjStopAtPos(0, 130);
      case 59:
         return jjStopAtPos(0, 120);
      case 60:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x280280010L);
      case 61:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      case 62:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x500500020L);
      case 63:
         return jjStopAtPos(0, 129);
      case 64:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x3e000f0000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 118);
      case 93:
         return jjStopAtPos(0, 119);
      case 94:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc104000000038L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x70000000000040L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f80060000000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe000000000400000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000100L, 0x7L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x20L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100010000L, 0xfc0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20884fc80L, 0xf0000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1404000000L, 0x7e00000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800003a0000L, 0x1f8000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x18001000000L, 0x800000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 116);
      case 124:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000080L);
      case 125:
         return jjStopAtPos(0, 117);
      case 126:
         return jjStopAtPos(0, 128);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 42:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 43:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         break;
      case 45:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 60:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x280200000L);
      case 61:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 62:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x500400000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x182882001800000L, active1, 0x12000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000180040fa40L, active1, 0x104000L, active2, 0L);
      case 102:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x60080000010L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000003a0000L, active1, 0x838200000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0x8L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x1L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x180L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0xe02L, active2, 0L);
      case 111:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x9810000004000080L, active1, 0x600001030L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010020a040420L, active1, 0x1c0060000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000010008L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x600410000000L, active1, 0xc00000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1088000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x2000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x4L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x4000000L, active2, 0L);
      case 124:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 163);
         break;
      case 60:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 61:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         break;
      case 62:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x600400400000000L, active1, 0x40400000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x10000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000228000100L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000004000040L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000180380480L, active1, 0xa0a020000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L, active1, 0x400008000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1802002000000000L, active1, 0x4001008L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000040040020L, active1, 0x240000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L, active1, 0x1000180L, active2, 0L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x88000382f800L, active1, 0x30800000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8c000000010000L, active1, 0x201L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 35);
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x140018000000210L, active1, 0x102824L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x80000002L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 35);
         break;
      case 121:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 162);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020000000000000L, active1, 0x400000008L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000008046100L, active1, 0x4000000L, active2, 0L);
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 35);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 35);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 35);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080800018L, active1, 0x1000804L, active2, 0L);
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x204200010000L, active1, 0x802000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000400000L, active1, 0x800080080L, active2, 0L);
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 35);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000041000080L, active1, 0x40000000L, active2, 0L);
      case 111:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x60002020040L, active1, 0x30000100L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x200000L, active2, 0L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 35);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000380000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x1005000520009800L, active1, 0x2440200L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x220L, active1, 0x100000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0x20000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400800L, active1, 0x30200L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000008L, active1, 0x2800000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x10080008040000L, active1, 0x40080L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000020001000L, active1, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000018501000400L, active1, 0x480000L);
      case 107:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 35);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000002080000000L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200810020L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 35);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 35);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000240L, active1, 0x100900L);
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x40000000L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 35);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000100L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000020000L, active1, 0x20000000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000100000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 35);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000080L, active1, 0x40000L);
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 35);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x4L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 35);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 35);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x406000040000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x10000L);
      case 104:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200021000L, active1, 0x440000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000006400L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000010001200200L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20180000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400800L, active1, 0x4000000L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 35);
         break;
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 35);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 35);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 35);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000040800100L, active1, 0x820000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4010000200000L, active1, 0x200L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 35);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 29);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 35);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 35);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x44008008400L, active1, 0x40000080L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 103:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400180300L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100010000L, active1, 0x400000000L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000L, active1, 0x4000000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 35);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 35);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 35);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000080L, active1, 0L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 35);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 35);
         return jjMoveStringLiteralDfa8_0(active0, 0x10800L, active1, 0x40200L);
      case 103:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 35);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x408180200L, active1, 0x44000080L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000100L, active1, 0L);
      case 112:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 35);
         break;
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 35);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 35);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0xc000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x180000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x48000000L, active1, 0L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000400L, active1, 0L);
      case 103:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000400008000L, active1, 0x4000000L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000200000L, active1, 0x200L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 35);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0x80L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 10, 35);
         break;
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 35);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 35);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L, active1, 0L);
      case 102:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 35);
         break;
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000190000L, active1, 0L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 71, 35);
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x440008000L, active1, 0L);
      case 119:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 35);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x600380000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 16, 35);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(10, 49);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L, active1, 0L);
      case 100:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 90, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x100008000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x380000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(11, 30);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 15, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 14, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 74:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(13, 32, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 38, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
      case 122:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x400100000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(16, 33, 35);
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x400100000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x400100000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x400200000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(19, 34, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(22, 20, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa25_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa27_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa28_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa29_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa30_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa31_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, 0L, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(31, 21, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(30, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec43 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec44 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec45 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec46 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec47 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec48 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec49 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec50 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec51 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec52 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec53 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec54 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec56 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec57 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec58 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec60 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec61 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 111)
                        kind = 111;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddTwoStates(8, 9);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddStates(12, 16);
                  }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(17, 19);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(20, 22);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if (curChar == 39 && kind > 109)
                     kind = 109;
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 18);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 23:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if (curChar == 34 && kind > 110)
                     kind = 110;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar != 36)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 15);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(44, 15);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar != 46)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(30, 32);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(30, 32);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(50, 15);
                  break;
               case 51:
                  if (curChar != 48)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(12, 16);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(53, 9);
                  break;
               case 54:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(54, 9);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(61, 15);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAdd(65);
                  break;
               case 66:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(67, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(35);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(17, 19);
                  break;
               case 9:
                  if ((0x100000001000L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 15:
                  if ((0x5000000050L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(40, 42);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 28:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 35:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(35);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 52:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(53, 9);
                  break;
               case 55:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 59:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 62:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 65:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(35);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(17, 19);
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               case 35:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x2000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   37, 38, 15, 41, 42, 45, 46, 26, 27, 29, 17, 19, 52, 54, 9, 55, 
   62, 2, 3, 5, 11, 12, 15, 26, 27, 31, 29, 37, 38, 15, 47, 48, 
   15, 56, 57, 63, 64, 65, 13, 14, 20, 21, 23, 28, 30, 32, 39, 40, 
   43, 44, 49, 50, 58, 59, 60, 61, 66, 67, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec61[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\141\163\160\145\143\164", "\141\146\164\145\162", 
"\141\162\157\165\156\144", "\142\145\146\157\162\145", "\160\157\151\156\164\143\165\164", 
"\145\170\145\143\165\164\151\157\156", "\162\145\164\165\162\156\151\156\147", 
"\160\162\151\166\151\154\145\147\145\144", "\160\145\162\164\141\162\147\145\164", "\160\145\162\164\150\151\163", 
"\160\145\162\143\146\154\157\167", "\160\145\162\143\146\154\157\167\142\145\154\157\167", 
"\160\145\162\164\171\160\145\167\151\164\150\151\156", "\151\163\163\151\156\147\154\145\164\157\156", 
"\164\150\162\157\167\151\156\147", "\160\162\157\143\145\145\144", 
"\164\150\151\163\112\157\151\156\120\157\151\156\164", 
"\164\150\151\163\112\157\151\156\120\157\151\156\164\123\164\141\164\151\143\120\141\162\164", 
"\164\150\151\163\105\156\143\154\157\163\151\156\147\112\157\151\156\120\157\151\156\164\123\164\141\164\151\143\120\141\162\164", "\144\145\143\154\141\162\145", "\160\141\162\145\156\164\163", 
"\167\141\162\156\151\156\147", "\145\162\162\157\162", "\163\157\146\164", 
"\160\162\145\143\145\144\145\156\143\145", "\100\164\171\160\145", "\100\155\145\164\150\157\144", 
"\100\143\157\156\163\164\162\165\143\164\157\162", "\100\146\151\145\154\144", 
"\151\156\151\164\151\141\154\151\172\141\164\151\157\156", "\160\162\145\151\156\151\164\151\141\154\151\172\141\164\151\157\156", 
"\163\164\141\164\151\143\151\156\151\164\151\141\154\151\172\141\164\151\157\156", "\147\145\164", "\163\145\164", "\150\141\156\144\154\145\162", 
"\141\144\166\151\143\145\145\170\145\143\165\164\151\157\156", "\167\151\164\150\151\156", "\167\151\164\150\151\156\143\157\144\145", 
"\143\146\154\157\167", "\143\146\154\157\167\142\145\154\157\167", "\164\141\162\147\145\164", 
"\141\162\147\163", "\100\164\150\151\163", "\100\164\141\162\147\145\164", 
"\100\141\162\147\163", "\100\167\151\164\150\151\156", 
"\100\141\156\156\157\164\141\164\151\157\156", "\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", 
"\146\151\156\141\154\154\171", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\164\162\151\143\164\146\160", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\100", "\75", "\74", "\76", "\41", "\176", "\77", "\72", "\75\75", 
"\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", 
"\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\74\74\74", 
"\76\76\76", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\45\75", "\74\74\75", "\76\76\75", "\74\74\74\75", "\76\76\76\75", "\56\56\56", null, 
"\52\57", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xfffce11fffffffffL, 0x2fffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0x5000000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[68];
private final int[] jjstateSet = new int[136];
protected char curChar;
/** Constructor. */
public JavaParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 166)
       {
          jjmatchedKind = 166;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
